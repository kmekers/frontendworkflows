@use "sass:map";
@use "sass:math";

@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;900&family=Lobster&display=swap");
/**
 * Komt aan bod in deze oefening:
 * - Reset
 * - Fonts
 * - Base
 * - Variables
 * - Maps
 * - Nesting
 * - Mixins
 * - Extend/Inheritance
 * - Functions
 * - Loops (for & each)
 * - If else condition
 * - Interpolation
 * - Built-In Sass Modules importeren met @use
 * - Debuggen
 */

html {
  box-sizing: border-box;
  scroll-behavior: smooth;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

// variables

$text-font: "Poppins", sans-serif;
$logo-font: "Lobster", cursive;

$colors: (
  color1: #efbc9b,
  color2: #ee92c2,
  color3: #9d6a89,
  color4: #725d68,
  color5: #a8b4a5,
);

$secondary-colors: (
  white: #fff,
  black: #333,
);

body {
  margin: 0;
  padding: 0;
  background-color: map.get($map: $secondary-colors, $key: white);
  font-family: $text-font;
  color: map.get($map: $secondary-colors, $key: black);
}

a {
  text-decoration: none;
}

// utilities

.text-left {
  text-align: left;
}
.text-center {
  text-align: center;
}
.text-right {
  text-align: right;
}

// functie
@function pxtorem($px) {
  @return ($px / 16) + rem;
}

// for lus loop
@for $i from 1 through 12 {
  $width: math.percentage($i / 12);

  .col-#{$i} {
    flex-basis: $width;
  }
}

$small-width: 768px;
$large-width: 1024px;

// mixins
@mixin small {
  @media (min-width: #{$small-width}) and (max-width: #{$small-width - 1px}) {
    @content;
  }
}

@mixin large {
  @media (min-width: #{$max-width}) {
    @content;
  }
}

@include small {
  .logo {
    font-size: 1.3rem;
  }
}

@mixin linearGradient($degree, $from, $to) {
  background-image: linear-gradient($degree, $from, $to);
}

/* mixins maken voor shapes */
@mixin circle($width, $type, $color) {
  height: $width;
  width: $width;
  background-color: $color;
  border-radius: $width / 2;
}

@mixin triangle($width, $type, $color) {
  width: 0;
  height: 0;
  border-left: $width / 2 solid transparent;
  border-right: $width / 2 solid transparent;
  border-bottom: $width / 2 solid $color;
}

/* if else conditie */
@mixin shape($width, $type, $color) {
  @if $type==circle {
    @include circle($width, $type, $color);
  }

  @if $type==triangle {
    @include triangle($width, $type, $color);
  } @else {
    height: $width;
    width: $width;
    background-color: $color;
  }
}

%flex-center-wrap-column {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  flex-wrap: wrap;
  flex-direction: column;
}

header {
  #navWrapper {
    display: flex;
    justify-content: space-between;
    height: pxtorem(100);
    background-color: map.get($map: $colors, $key: color1);
    color: map.get($map: $secondary-colors, $key: white);
    padding: 25px 20px;

    .logo {
      font: {
        size: 2rem;
        family: $logo-font;
      }
    }

    ul {
      display: flex;
      list-style-type: none;

      li {
        margin-right: pxtorem(10);

        a {
          color: map.get($map: $secondary-colors, $key: white);
          transition: 400ms;

          &:hover {
            color: map.get($map: $secondary-colors, $key: black);
          }
        }
      }
    }
  }

  #heroWrapper {
    height: 60vh;
    @include linearGradient(
      90deg,
      map.get($map: $colors, $key: color3),
      map.get($map: $colors, $key: color2)
    );

    .hero-content-container {
      @extend %flex-center-wrap-column;

      .hero-text {
        width: 50%;
        margin-bottom: pxtorem(20);

        font: {
          size: 3rem;
          weight: 900;
        }
      }

      .hero-shape {
        @include shape(150px, circle, map.get($map: $colors, $key: color1));
      }
    }
  }
}

// main = colorblocks
#colorBlocks {
  width: 100%;
  display: flex;
  flex-wrap: wrap;

  .color-block {
    height: pxtorem(150);
    // flex-basis: 20%;
  }

  @each $key, $color in $colors {
    .#{$key} {
      background-color: $color;
    }
  }
}

// footer
footer {
  #footerWrapper {
    @extend %flex-center-wrap-column;
    height: 200px;

    .button {
      border: none;
      padding: 15px;
      background-color: map.get($map: $colors, $key: color1);
      color: map.get($map: $secondary-colors, $key: white);
      text-transform: uppercase;
      font-weight: 900;
      transition: 400ms;

      &:hover {
        background-color: map.get($map: $colors, $key: color2);
        color: map.get($map: $secondary-colors, $key: black);
      }
    }
  }
}
